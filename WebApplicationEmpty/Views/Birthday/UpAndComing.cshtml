@model DateTime

@{
    var birthdays = new List<Birthday>()
    {
        new Birthday
        {
            BornIn = new DateTime(2021, 10, 23),
            Person = "Billie",
        },
        new Birthday
        {
            BornIn = new DateTime(1988, 11, 4),
            Person = "Maria",
        },
        new Birthday
        {
            BornIn = new DateTime(1989, 2, 20),
            Person = "Johan",
        },
        new Birthday
        {
            BornIn = new DateTime(1989, 5, 3),
            Person = "Jon",
        },
        new Birthday
        {
            BornIn = new DateTime(1989, 3, 14),
            Person = "Emil",
        },
    };

    Today = Model;

    // sortera så närmsta födelsedag är först
    birthdays.Sort((birthdayA, birthdayB) => 
        DateTime.Compare(birthdayA.ThisYear(Today), birthdayB.ThisYear(Today)));
    

    var birthdaysWithinTwoMonth = birthdays
        // hämta bara födelsedagar som ligger i framtiden
        .Where(birthday => (birthday.ThisYear(Today) - Today).Days >= 0)
        // hämta bara födelsedagar som ligger inom två månader från idag
        .Where(birthday => (birthday.ThisYear(Today) - Today).Days <= 61)
        .ToList();
}

<p class="todays_date">
    Idag är det den @Today.ToString("dd'/'MM")
</p>

@if (birthdaysWithinTwoMonth.Count > 0)
{
    @foreach (var birthday in birthdaysWithinTwoMonth)
    {
        PrintBirthday(birthday);
    }
}
else
{
    <p>Det finns inte några kommande födelsedagar</p>
}

@functions{
    DateTime Today { get; set; }

    void PrintBirthday(Birthday birthday)
    {
        <p>
            @birthday.Person fyller år den 
            @birthday.ThisYear(Today).ToString("M") 
            om @((birthday.ThisYear(Today) - Today).Days) dagar.
        </p>
    }
}

@section UpAndComing_Style
{
    <style>

        p {
            font-weight: bolder;
            text-align: center;
        }


    </style>

}

